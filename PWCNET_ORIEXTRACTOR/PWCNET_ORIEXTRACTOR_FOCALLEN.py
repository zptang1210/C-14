import os
import sys
import cv2
from PWC_NET import PWC_NET
from cameraMotion import cameraMotion_focallen

DEFAULT_FOCALLEN = 0.82

# NOTICE that this function will compute the motion from #startFrame to #endFrame+1 in the video.
# Every two adjacent video frames can generate one optical flow frame.
# Therefore, for the generated optical flow labelled from #startFrame to #endFrame, #n is the optical flow is generated by frame #n and #n+1 in videos.
def PWCNET_ORIEXTRACTOR_FOCALLEN(videoName, startFrame, endFrame, height, width, focallen_param=DEFAULT_FOCALLEN, outputName=None):
     if outputName==None:
          outputName = videoName

     os.makedirs('./extracted/' + outputName, exist_ok=True)
     PWC_NET(arguments_strVideo = './videos/' + videoName + '.MP4',
             arguments_strOut_path = './extracted/' + outputName + '/',
             arguments_strStart_Frame = str(startFrame),
             arguments_strFrame_Num = str(endFrame-startFrame+1)
          )
          
     # # Use shell to implement the same task.
     # command_of = 'python ./PWC_NET.py' + ' ' +\
     #      ('--video ' + videoName + '.MP4') + ' ' +\
     #      ('--out ./extracted/' + outputName + '/') + ' ' +\
     #      ('--start ' + str(startFrame)) + ' ' +\
     #      ('--num ' + str(endFrame-startFrame+1))      
     # # print(command_of)
     # os.system(command_of)

     cameraMotion_focallen(outputName, startFrame, endFrame, height, width, focallen_param)

     # # Use shell to implement the same task
     # command_ori = './cameraMotion/run_extractOrientation.sh' + ' ' +\
     #      '/cm/shared/apps/MATLAB/MATLAB_Runtime/v901' + ' ' +\
     #      outputName + ' ' + str(startFrame) + ' ' + str(endFrame) + ' ' +\
     #      str(height) + ' ' + str(width)    
     # # print(command_ori)
     # os.system(command_ori)


if __name__ == '__main__':
     if len(sys.argv) == 2 or len(sys.argv) == 4 or len(sys.argv) == 5 or len(sys.argv) == 6:
          videoName = sys.argv[1]
          cap = cv2.VideoCapture('./videos/' + videoName + '.MP4') # MP4 format by default
          
          if len(sys.argv) == 2:
               frameStart = 0
               frameEnd = int(cap.get(cv2.CAP_PROP_FRAME_COUNT)) - 2 # Notice: we need to minus 1 to guaranttee the last frame exists. See the comment above the function for detail!
               focallen_param = DEFAULT_FOCALLEN
               outputName = None
          elif len(sys.argv) == 4:
               frameStart = int(sys.argv[2])
               frameEnd = int(sys.argv[3])
               focallen_param = DEFAULT_FOCALLEN
               outputName = None
          elif len(sys.argv) == 5:
               frameStart = int(sys.argv[2])
               frameEnd = int(sys.argv[3])
               focallen_param = float(sys.argv[4])
               outputName = None               
          elif len(sys.argv) == 6:
               frameStart = int(sys.argv[2])
               frameEnd = int(sys.argv[3])
               focallen_param = float(sys.argv[4])
               outputName = sys.argv[5]

          height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
          width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))

          PWCNET_ORIEXTRACTOR_FOCALLEN(videoName, frameStart, frameEnd, height, width, focallen_param=focallen_param, outputName=outputName)

          cap.release()
     else:
          print('Command Formatting:\nscript.py videoName\nscript.py videoName frameStart frameEnd\nscript.py videoName frameStart frameEnd focallen_param\nscript.py videoName frameStart frameEnd focallen_param outputName\n')

     
     
